{"version":3,"sources":["components/navBar.jsx","components/counter.jsx","components/counters.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","props","className","href","totalCounters","Counter","styles","fontSize","fontWeight","this","children","onClick","onIncrement","counter","style","width","height","getBadgeClasses","formatCount","onDecrement","onDelete","id","classes","value","Component","Counters","onReset","counters","map","key","App","state","handleIncrement","index","indexOf","setState","handleDecrement","handleDelete","filter","c","handleReset","resetCounters","Fragment","length","backgroundColor","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.293e4748.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Navbar = props => {\r\n  return (\r\n    <nav className=\"navbar navbar-light bg-light\">\r\n      <a className=\"navbar-brand\" href=\"#\">\r\n        Navbar{\" \"}\r\n        <span className=\"badge pill badge-secondary\">\r\n          {props.totalCounters}\r\n        </span>\r\n      </a>\r\n    </nav>\r\n  );\r\n};\r\n\r\n// class NavBar extends Component {\r\n//   render() {\r\n//     return (\r\n//       <nav className=\"navbar navbar-light bg-light\">\r\n//         <a className=\"navbar-brand\" href=\"#\">\r\n//           Navbar{\" \"}\r\n//           <span className=\"badge pill badge-secondary\">\r\n//             {this.props.totalCounters}\r\n//           </span>\r\n//         </a>\r\n//       </nav>\r\n//     );\r\n//   }\r\n// }\r\n\r\nexport default Navbar;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Counter extends Component {\r\n \r\n  styles = {\r\n    fontSize: 20,\r\n    fontWeight: \"bold\"\r\n  };\r\n\r\n  render() {\r\n    //let Create if the count is more than 0 , colour should change\r\n    return (\r\n      <div>\r\n        {this.props.children}\r\n        {/*Using Inline Style*/}\r\n        <button\r\n          onClick={() => this.props.onIncrement(this.props.counter)}\r\n          style={{ fontSize: 20, width: 300, height: 40 }}\r\n          className=\"btn btn-success btn-sm btn-block\"\r\n        >\r\n          Increment\r\n        </button>\r\n\r\n        {/*Using Custom Style*/}\r\n        <span style={this.styles} className={this.getBadgeClasses()}>\r\n          {this.formatCount()}\r\n        </span>\r\n        <br />\r\n        {/*this.state.tags.length === 0 && \"Please create new tags!\"*/}\r\n        {/*this.renderTags()*/}\r\n\r\n        <button\r\n          onClick={() => this.props.onDecrement(this.props.counter)}\r\n          style={{ fontSize: 20, width: 300, height: 40 }}\r\n          className=\"btn btn-info btn-sm btn-block\"\r\n        >\r\n          Decrement\r\n        </button>\r\n        <button\r\n          onClick={() => this.props.onDelete(this.props.counter.id)}\r\n          style={{ fontSize: 20, width: 200, height: 40 }}\r\n          className=\"btn btn-danger btn-sm btn-block\"\r\n        >\r\n          Delete\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  \r\n\r\n  getBadgeClasses() {\r\n    let classes = \"m-3 badge badge-\";\r\n    classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\r\n    return classes;\r\n  }\r\n  formatCount() {\r\n    //Object destructing\r\n    const { value } = this.props.counter;\r\n    return value === 0 ? \"0\" : value;\r\n  }\r\n}\r\n\r\nexport default Counter;\r\n","import React, { Component } from \"react\";\r\nimport Counter from \"./counter\";\r\nclass Counters extends Component {\r\n  render() {\r\n    // console.log(\"props\", this.props);\r\n    return (\r\n      <div>\r\n        <button\r\n          onClick={this.props.onReset}\r\n          className=\"btn btn-default btm-sm m-2\"\r\n        >\r\n          Reset\r\n        </button>\r\n        {this.props.counters.map(counter => (\r\n          <Counter\r\n            key={counter.id}\r\n            onDelete={this.props.onDelete}\r\n            counter={counter}\r\n            onIncrement={this.props.onIncrement}\r\n            onDecrement={this.props.onDecrement}\r\n          >\r\n            <hr />\r\n            <h4>Counter @{counter.id}</h4>\r\n          </Counter>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counters;\r\n","import React, { Component } from \"react\";\nimport NavBar from \"./components/navBar\";\nimport Counters from \"./components/counters\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    counters: [{ id: 1, value: 0 }, { id: 2, value: 0 }, { id: 3, value: 0 }]\n  };\n\n\n  handleIncrement = counter => {\n    const counters = [...this.state.counters];\n    //we need the index of the counters array\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter };\n    counters[index].value++;\n    this.setState({ counters });\n    //this.setState({ value: this.state.value + 1 });\n  };\n\n  handleDecrement = counter => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter };\n    counters[index].value--;\n    this.setState({ counters });\n    //console.log(product);\n    //this.setState({ value: this.state.value - 1 });\n  };\n  handleDelete = id => {\n    //console.log(\"Event Handler called\", id);\n    const counters = this.state.counters.filter(c => c.id !== id);\n    this.setState({ counters });\n  };\n\n  handleReset = () => {\n    const resetCounters = this.state.counters.map(c => {\n      c.value = 0;\n      return c;\n    });\n    this.setState({ resetCounters });\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <NavBar\n          totalCounters={this.state.counters.filter(c => c.value > 0).length}\n        />\n        <main style={{ backgroundColor: \"#fffdd0\" }} className=\"container\">\n          <Counters\n            counters={this.state.counters}\n            onReset={this.handleReset}\n            onIncrement={this.handleIncrement}\n            onDelete={this.handleDelete}\n            onDecrement={this.handleDecrement}\n          />\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}